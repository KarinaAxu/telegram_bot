import os
import django
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from asgiref.sync import sync_to_async

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tgbot.settings')
django.setup()

from tg.models import Post

MAIN_MENU_KEYBOARD = ReplyKeyboardMarkup(
    [
        ["üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã", "‚ú® –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç"],
        ["üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç", "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"],
        ["‚ùì –ü–æ–º–æ—â—å"]
    ],
    resize_keyboard=True
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç–∏–∫! üêæ –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=MAIN_MENU_KEYBOARD
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤
@sync_to_async
def get_post_list():
    posts = Post.objects.all().order_by('-created_date')
    if not posts:
        return "–ü–æ—Å—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –∫—Ä–∞—Å–∏–≤–æ–µ! üå∏"
    return "\n".join([f"üìå {post.id}: {post.title} - {post.description[:50]}..." for post in posts])

async def list_posts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    post_list = await get_post_list()
    await update.message.reply_text(post_list)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
async def add_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    user_input = update.message.text.strip()

    if ',' not in user_input:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ üíî\n–ü—Ä–∏–º–µ—Ä: –í–µ—á–µ—Ä, –ö–∞–∫–æ–π –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç!"
        )
        return

    try:
        title, description = map(str.strip, user_input.split(",", 1))
        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await sync_to_async(Post.objects.create)(title=title, description=description)
        await update.message.reply_text(f"–£—Ä–∞! –ü–æ—Å—Ç '{title}' –¥–æ–±–∞–≤–ª–µ–Ω! üåü")
    except Exception as e:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üêæ")

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
async def edit_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ ID, –Ω–æ–≤–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    user_input = update.message.text.strip()

    if ',' not in user_input:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ID, –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ üíî\n–ü—Ä–∏–º–µ—Ä: 1, –ù–æ–≤—ã–π –≤–µ—á–µ—Ä, –ù–æ–≤—ã–π –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç!"
        )
        return

    try:
        post_id, title, description = map(str.strip, user_input.split(",", 2))
        post_id = int(post_id)
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        post = await sync_to_async(Post.objects.filter(id=post_id).update)(title=title, description=description)
        if post:
            await update.message.reply_text(f"–ü–æ—Å—Ç —Å ID {post_id} –æ–±–Ω–æ–≤–ª–µ–Ω! üåü")
        else:
            await update.message.reply_text("–ü–æ—Å—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. üíî")
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. üíî")
    except Exception as e:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üêæ")

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
async def delete_post(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥ ID –ø–æ—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    user_input = update.message.text.strip()

    try:
        post_id = int(user_input)
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å—Ç
        post = await sync_to_async(Post.objects.filter(id=post_id).delete)()
        if post:
            await update.message.reply_text(f"–ü–æ—Å—Ç —Å ID {post_id} —É–¥–∞–ª–µ–Ω. üóëÔ∏è")
        else:
            await update.message.reply_text("–ü–æ—Å—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. üíî")
    except ValueError:
        await update.message.reply_text("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. üíî")
    except Exception as e:
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üêæ")

# –ü–æ–º–æ—â—å
async def help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏!\n\n"
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
        "üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã ‚Äî –ø–æ–∫–∞–∂—É –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø–æ—Å—Ç—ã.\n"
        "‚ú® –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Å—Ç, —É–∫–∞–∑–∞–≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
        "üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç ‚Äî –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ—Å—Ç, —É–∫–∞–∑–∞–≤ ID, –Ω–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
        "‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç ‚Äî —É–¥–∞–ª–∏—Ç–µ –ø–æ—Å—Ç –ø–æ –µ–≥–æ ID.\n"
        "‚ùì –ü–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∂—É —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    )
    await update.message.reply_text(help_text)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
app = ApplicationBuilder().token("7757445345:AAG6WyTfCrClWs2-xMUb4vkV-gRgMFJ_qQg").build()

app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.Text("üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å—Ç—ã"), list_posts))
app.add_handler(MessageHandler(filters.Text("‚ú® –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç"), add_post))
app.add_handler(MessageHandler(filters.Text("üîß –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç"), edit_post))
app.add_handler(MessageHandler(filters.Text("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç"), delete_post))
app.add_handler(MessageHandler(filters.Text("‚ùì –ü–æ–º–æ—â—å"), help))

if __name__ == "__main__":
    app.run_polling()