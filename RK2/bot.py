import os
import django
from asgiref.sync import sync_to_async
from django.contrib.auth import get_user_model
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tgbot.settings')
django.setup()

from tg.models import Post

@sync_to_async
def create_post_in_db(title, description, author_id):
    user = get_user_model().objects.get(telegram_id=author_id)
    return Post.objects.create(title=title, description=description, author=user)

@sync_to_async
def check_user_exists(user_id):
    return get_user_model().objects.filter(telegram_id=user_id).exists()

@sync_to_async
def create_user(user_id, username):
    return get_user_model().objects.create(telegram_id=user_id, username=username)

@sync_to_async
def get_user_posts(user_id):
    return list(Post.objects.filter(author_id=user_id).values("id", "title", "description"))

@sync_to_async
def delete_post(post_id):
    return Post.objects.filter(id=post_id).delete()

@sync_to_async
def get_post_by_id(post_id):
    return Post.objects.filter(id=post_id).values("id", "title", "description").first()

async def start(update: Update, context):
    user_id = update.message.from_user.id
    username = update.message.from_user.username or "—Å–æ–ª–Ω—ã—à–∫–æ"
    if not await check_user_exists(user_id):
        await create_user(user_id, username)
        await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {username}! üå∏ –¢—ã —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã!")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! üêæ –Ø —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞–º–∏. –í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "‚ú® /start - –ù–∞—á–∞—Ç—å –Ω–∞—à–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ\n"
        "üåà /help - –£–∑–Ω–∞—Ç—å –º–æ–∏ —É–º–µ–Ω–∏—è\n"
        "üìã /create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç\n"
        "üñäÔ∏è /edit - –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç\n"
        "üóëÔ∏è /delete - –£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç\n"
        "üìë /view - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã\n\n"
        "–î–∞–≤–∞–π —Ç–≤–æ—Ä–∏—Ç—å –º–∞–≥–∏—é –≤–º–µ—Å—Ç–µ! ‚ú®"
    )

async def help_command(update: Update, context):
    await update.message.reply_text(
        "–Ø —É–º–µ—é:\n"
        "üåü /create - –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã\n"
        "üí° /edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã\n"
        "üóëÔ∏è /delete - –£–¥–∞–ª—è—Ç—å –ø–æ—Å—Ç—ã\n"
        "üìë /view - –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —Å–≤–æ–∏ –ø–æ—Å—Ç—ã\n\n"
        "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—Å—Ç–æ –∑–æ–≤–∏ –º–µ–Ω—è! üå∑"
    )

async def create_command(update: Update, context):
    user_id = update.message.from_user.id
    if not await check_user_exists(user_id):
        await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
        return
    if len(context.args) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: `/create –ù–∞–∑–≤–∞–Ω–∏–µ –û–ø–∏—Å–∞–Ω–∏–µ`")
        return
    title, description = context.args[0], " ".join(context.args[1:])
    await create_post_in_db(title, description, user_id)
    await update.message.reply_text(f"–ü–æ—Å—Ç '{title}' —Å–æ–∑–¥–∞–Ω! üéâ")

async def list_posts(update: Update, context):
    user_id = update.message.from_user.id
    posts = await get_user_posts(user_id)
    if not posts:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create!")
        return
    buttons = [
        [InlineKeyboardButton(post["title"], callback_data=f"view_post_{post['id']}"),
         InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_post_{post['id']}"),
         InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_post_{post['id']}")]
        for post in posts
    ]
    markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í–∞—à–∏ –ø–æ—Å—Ç—ã:", reply_markup=markup)

async def view_posts(update: Update, context):
    user_id = update.message.from_user.id
    posts = await get_user_posts(user_id)
    if not posts:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create!")
        return
    posts_text = "\n\n".join([f"üìã {post['title']}: {post['description']}" for post in posts])
    await update.message.reply_text(f"–í–∞—à–∏ –ø–æ—Å—Ç—ã:\n\n{posts_text}")

async def handle_post_actions(update: Update, context):
    query = update.callback_query
    await query.answer()
    data = query.data
    if data.startswith("view_post_"):
        post_id = int(data.split("_")[2])
        post = await get_post_by_id(post_id)
        if post:
            await query.message.reply_text(f"üìã –ü–æ—Å—Ç: {post['title']}\n\n{post['description']}")
        else:
            await query.message.reply_text("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif data.startswith("edit_post_"):
        post_id = int(data.split("_")[2])
        post = await get_post_by_id(post_id)
        if post:
            await query.message.reply_text(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞: {post['title']}\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {post['description']}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
        else:
            await query.message.reply_text("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    elif data.startswith("delete_post_"):
        post_id = int(data.split("_")[2])
        await delete_post(post_id)
        await query.message.reply_text("–ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω. üóëÔ∏è")

async def handle_edit(update: Update, context):
    user_id = update.message.from_user.id
    if len(context.args) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ—Å—Ç–∞ –∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç: `/edit ID –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç`.")
        return
    post_id = int(context.args[0])
    new_description = " ".join(context.args[1:])
    post = await get_post_by_id(post_id)
    if post:
        post['description'] = new_description
        Post.objects.filter(id=post_id).update(description=new_description)  # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ
        await update.message.reply_text(f"–ü–æ—Å—Ç '{post['title']}' –æ–±–Ω–æ–≤–ª–µ–Ω! üåü")
    else:
        await update.message.reply_text("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

def main():
    app = ApplicationBuilder().token("7757445345:AAG6WyTfCrClWs2-xMUb4vkV-gRgMFJ_qQg").build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("create", create_command))
    app.add_handler(CommandHandler("list", list_posts))
    app.add_handler(CommandHandler("view", view_posts))
    app.add_handler(CallbackQueryHandler(handle_post_actions))
    app.add_handler(CommandHandler("edit", handle_edit))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... üêæ")
    app.run_polling()

if __name__ == "__main__":
    main()